"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","toastr","ngDragDrop"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("drinks"),app.registerModule("drinks.services"),app.registerModule("drinks.routes",["ui.router","drinks.services"])}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("menu",{url:"/menu",templateUrl:"modules/core/client/views/menu.client.view.html",controller:"MenuController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus","$location",function($scope,$state,Authentication,Menus,$location){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.isActive=function(viewLocation){return viewLocation===$location.path()}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("MenuController",["$scope","Authentication","DrinksService",function($scope,Authentication,DrinksService){function updateDrinks(){var drinks=DrinksService.query();drinks.$promise.then(function(result){vm.drinks=result})}function successCallback(res){updateDrinks()}function errorCallback(res){console.log("error callback")}$scope.authentication=Authentication;var vm=this,drinks=DrinksService.query();vm.drinks=drinks,$scope.reindexDrink=function(drink,index){drink.menuIndex!==index&&(drink.menuIndex=index,drink.$update())},$scope.startDrinkDrag=function(event,ui,title){$scope.draggedIndex=this.$index,$scope.draggedDrink=this.drink},$scope.dropOnDrink=function(event,ui){$scope.draggedDrink.menuIndex=this.$index,this.drink.menuIndex=$scope.draggedIndex,$scope.draggedDrink.menuNumber===this.drink.menuNumber&&($scope.draggedDrink.$update(successCallback,errorCallback),this.drink.$update(successCallback,errorCallback))},$scope.dropOnMenu0=function(event,ui){0!==$scope.draggedDrink.menuNumber&&($scope.draggedDrink.menuNumber=0,$scope.draggedDrink.$update(successCallback,errorCallback))},$scope.dropOnMenu1=function(event,ui){1!==$scope.draggedDrink.menuNumber&&($scope.draggedDrink.menuNumber=1,$scope.draggedDrink.$update(successCallback,errorCallback))},$scope.dropOnMenu2=function(event,ui){2!==$scope.draggedDrink.menuNumber&&($scope.draggedDrink.menuNumber=2,$scope.draggedDrink.$update(successCallback,errorCallback))},setInterval(updateDrinks,5e3),$scope.topbarActive=!0}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["manager","bartender","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Drinks",state:"drinks",type:"dropdown",roles:["admin","manager","bartender"]}),Menus.addSubMenuItem("topbar","drinks",{title:"List Drinks",state:"drinks.list",roles:["admin","manager","bartender"]}),Menus.addSubMenuItem("topbar","drinks",{title:"Create Drink",state:"drinks.create",roles:["admin","manager"]})}angular.module("drinks").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("drinks",{"abstract":!0,url:"/drinks",template:"<ui-view/>"}).state("drinks.list",{url:"",templateUrl:"modules/drinks/client/views/list-drinks.client.view.html",controller:"DrinksListController",controllerAs:"vm",data:{roles:["admin","manager","bartender"],pageTitle:"Drinks List"}}).state("drinks.create",{url:"/create",templateUrl:"modules/drinks/client/views/form-drink.client.view.html",controller:"DrinksController",controllerAs:"vm",resolve:{drinkResolve:newDrink},data:{roles:["admin","manager"],pageTitle:"Drinks Create"}}).state("drinks.edit",{url:"/:drinkId/edit",templateUrl:"modules/drinks/client/views/form-drink.client.view.html",controller:"DrinksController",controllerAs:"vm",resolve:{drinkResolve:getDrink},data:{roles:["admin","manager"],pageTitle:"Edit Drink {{ drink.drinkName }}"}}).state("drinks.view",{url:"/:drinkId",templateUrl:"modules/drinks/client/views/view-drink.client.view.html",controller:"DrinksController",controllerAs:"vm",resolve:{drinkResolve:getDrink},data:{roles:["admin","manager","bartender"],pageTitle:"Drink {{ drink.drinkName }}"}})}function getDrink($stateParams,DrinksService){return DrinksService.get({drinkId:$stateParams.drinkId}).$promise}function newDrink(DrinksService){return new DrinksService}angular.module("drinks.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getDrink.$inject=["$stateParams","DrinksService"],newDrink.$inject=["DrinksService"]}(),function(){function DrinksController($scope,$state,drink,Authentication,toastr){function dropDownChange(){document.getElementById("previewImg").src=selectImage()}function remove(){function successCallback(res){$state.go("drinks.list",{drinkId:res._id}),toastr.success(vm.drink.drinkName+" was deleted!")}function errorCallback(res){vm.error=res.data.message}confirm("Are you sure you want to delete?")&&vm.drink.$remove(successCallback,errorCallback)}function save(isValid){function successCallback(res){$state.go("drinks.list",{drinkId:res._id}),isEdit?toastr.success(vm.drink.drinkName+" was updated!"):toastr.success(vm.drink.drinkName+" was created!")}function errorCallback(res){vm.error=res.data.message}return isValid?(vm.drink.drinkImageURL=selectImage(),vm.drink.color=vm.drink.color.colorOption,vm.drink.glass=vm.drink.glass.glassOption,void(vm.drink._id?vm.drink.$update(successCallback,errorCallback):vm.drink.$save(successCallback,errorCallback))):($scope.$broadcast("show-errors-check-validity","vm.form.drinkForm"),toastr.error("Drink not updated!"),!1)}function cancel(){$state.go("drinks.list")}function selectImage(){var url="http://swamphead.com/wp-content/uploads/2016/03/";if("Pint"===vm.drink.glass.glassOption){if("Pale Yellow"===vm.drink.color.colorOption)return url+"Pint_Icon_PaleYellow.png";if("Yellow"===vm.drink.color.colorOption)return url+"pint_Icon_Yellow.png";if("Orange"===vm.drink.color.colorOption)return url+"pint_Icon_Orange.png";if("Red"===vm.drink.color.colorOption)return url+"pint_Icon_Red.png";if("Dark Red"===vm.drink.color.colorOption)return url+"pint_Icon_darkRed.png";if("Brown Black"===vm.drink.color.colorOption)return url+"pint_Icon_brownBlack.png";if("Black"===vm.drink.color.colorOption)return url+"pint_Icon_Black.png"}else if("Snifter"===vm.drink.glass.glassOption){if("Pale Yellow"===vm.drink.color.colorOption)return url+"sniffer_Icon_paleYellow.png";if("Yellow"===vm.drink.color.colorOption)return url+"sniffer_Icon_Yellow.png";if("Orange"===vm.drink.color.colorOption)return url+"sniffer_Icon_Orange.png";if("Red"===vm.drink.color.colorOption)return url+"sniffer_Icon_Red.png";if("Dark Red"===vm.drink.color.colorOption)return url+"sniffer_Icon_DarkRed.png";if("Brown Black"===vm.drink.color.colorOption)return url+"sniffer_Icon_BrownBlack.png";if("Black"===vm.drink.color.colorOption)return url+"sniffer_Icon_Black.png"}else if("Wit"===vm.drink.glass.glassOption){if("Pale Yellow"===vm.drink.color.colorOption)return url+"wit_Icon_paleYellow.png";if("Yellow"===vm.drink.color.colorOption)return url+"wit_Icon_Yellow.png";if("Orange"===vm.drink.color.colorOption)return url+"wit_Icon_orange.png";if("Red"===vm.drink.color.colorOption)return url+"wit_Icon_red.png";if("Dark Red"===vm.drink.color.colorOption)return url+"wit_Icon_darkRed.png";if("Brown Black"===vm.drink.color.colorOption)return url+"wit_Icon_brownBlack.png";if("Black"===vm.drink.color.colorOption)return url+"wit_Icon_Black.png"}else if("Pilsner"===vm.drink.glass.glassOption){if("Pale Yellow"===vm.drink.color.colorOption)return url+"pilsner_icon_paleYellow.png";if("Yellow"===vm.drink.color.colorOption)return url+"pilsner_icon_Yellow.png";if("Orange"===vm.drink.color.colorOption)return url+"pilsner_icon_orange.png";if("Red"===vm.drink.color.colorOption)return url+"pilsner_icon_red.png";if("Dark Red"===vm.drink.color.colorOption)return url+"pilsner_icon_darkRed.png";if("Brown Black"===vm.drink.color.colorOption)return url+"pilsner_icon_brownBlack.png";if("Black"===vm.drink.color.colorOption)return url+"pilsner_icon_Black.png"}else{if("Hef"!==vm.drink.glass.glassOption)return"http://swamphead.com/wp-content/uploads/2016/03/circleLogo_White-01.png";if("Pale Yellow"===vm.drink.color.colorOption)return url+"hef_Icon_paleYellow.png";if("Yellow"===vm.drink.color.colorOption)return url+"hef_Icon_yellow.png";if("Orange"===vm.drink.color.colorOption)return url+"hef_Icon_orange.png";if("Red"===vm.drink.color.colorOption)return url+"hef_Icon_red.png";if("Dark Red"===vm.drink.color.colorOption)return url+"hef_Icon_darkRed.png";if("Brown Black"===vm.drink.color.colorOption)return url+"hef_icon_brownBlack.png";if("Black"===vm.drink.color.colorOption)return url+"hef_Icon_Black.png"}}var vm=this;$scope.authentication=Authentication,vm.drink=drink,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.cancel=cancel,vm.dropDownChange=dropDownChange;var isEdit=vm.drink._id?!0:!1;$scope.colorOptions=[{id:1,colorOption:"Pale Yellow"},{id:2,colorOption:"Yellow"},{id:3,colorOption:"Orange"},{id:4,colorOption:"Red"},{id:5,colorOption:"Dark Red"},{id:6,colorOption:"Brown Black"},{id:7,colorOption:"Black"}],$scope.glassOptions=[{id:1,glassOption:"Pint"},{id:2,glassOption:"Snifter"},{id:3,glassOption:"Wit"},{id:4,glassOption:"Pilsner"},{id:5,glassOption:"Hef"}],$scope.getDefaultColor=function(){return $scope.colorOptions[0].colorOption===vm.drink.color?$scope.colorOptions[0]:$scope.colorOptions[1].colorOption===vm.drink.color?$scope.colorOptions[1]:$scope.colorOptions[2].colorOption===vm.drink.color?$scope.colorOptions[2]:$scope.colorOptions[3].colorOption===vm.drink.color?$scope.colorOptions[3]:$scope.colorOptions[4].colorOption===vm.drink.color?$scope.colorOptions[4]:$scope.colorOptions[5].colorOption===vm.drink.color?$scope.colorOptions[5]:$scope.colorOptions[6].colorOption===vm.drink.color?$scope.colorOptions[6]:void 0},$scope.getDefaultGlass=function(){return $scope.glassOptions[0].glassOption===vm.drink.glass?$scope.glassOptions[0]:$scope.glassOptions[1].glassOption===vm.drink.glass?$scope.glassOptions[1]:$scope.glassOptions[2].glassOption===vm.drink.glass?$scope.glassOptions[2]:$scope.glassOptions[3].glassOption===vm.drink.glass?$scope.glassOptions[3]:$scope.glassOptions[4].glassOption===vm.drink.glass?$scope.glassOptions[4]:void 0}}angular.module("drinks").controller("DrinksController",DrinksController),DrinksController.$inject=["$scope","$state","drinkResolve","Authentication","toastr"]}(),function(){function DrinksListController(DrinksService,$state,$scope,toastr){function AddToMenu(drink){function successCallback(res){$state.go("drinks.list",{drinkId:res._id})}function errorCallback(res){vm.error=res.data.message}drink.$update(successCallback,errorCallback)}function mvOnMenu(drink){toastr.success(drink.drinkName+" was added to tap!")}function mvOffMenu(drink){toastr.success(drink.drinkName+" was removed from tap!")}var vm=this;vm.AddToMenu=AddToMenu,vm.mvOnMenu=mvOnMenu,vm.mvOffMenu=mvOffMenu,vm.drinks=DrinksService.query()}angular.module("drinks").controller("DrinksListController",DrinksListController),DrinksListController.$inject=["DrinksService","$state","$scope","toastr"]}(),function(){function DrinksService($resource){return $resource("api/drinks/:drinkId",{drinkId:"@_id"},{update:{method:"PUT"}})}angular.module("drinks.services").factory("DrinksService",DrinksService),DrinksService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["bartender","admin","manager"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve","toastr",function($scope,$state,Authentication,userResolve,toastr){$scope.authentication=Authentication,$scope.user=userResolve;var vm=this;vm.person=userResolve,$scope.roleOptions=[{id:1,roleOption:"bartender"},{id:2,roleOption:"manager"},{id:3,roleOption:"admin"},{id:4,roleOption:"user"}],vm.person.$promise.then(function(result){if($scope.roleOptions[0].roleOption===$scope.user.roles[0])$scope.user.roles=$scope.roleOptions[0];else if($scope.roleOptions[1].roleOption===$scope.user.roles[0])$scope.user.roles=$scope.roleOptions[1];else if($scope.roleOptions[2].roleOption===$scope.user.roles[0])$scope.user.roles=$scope.roleOptions[2];else{if($scope.roleOptions[3].roleOption!==$scope.user.roles[0])return;$scope.user.roles=$scope.roleOptions[3]}},function(err){console.log(err)}),$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users"),toastr.success($scope.user.username+" was deleted!")}))},$scope.cancel=function(){$state.go("admin.users")},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),toastr.error("User not updated!"),!1;$scope.user.roles=$scope.user.roles.roleOption;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id}),toastr.success(user.username+" was updated!")},function(errorResponse){$scope.error=errorResponse.data.message,toastr.warning($scope.error)})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){
return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a password.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);